постройка дома 

x, y, l, c1, c2, c3, c4, c5, c6 = [int(i) for i in input().split(" ")]
summa = 0
p = 2*(x+y) #периметр нового дома
new = c4 + c5 #постройка из нового
old = c2 + c3 #постройка из старого разрушенного
snos = c2 + c6 #снос и вывоз
if (old <= new + snos) and (c1 <= old):
    if (l >= max(x,y)) and (l<p):
        summa = c1 * max(x, y) + (p - l) * new + (l - max(x, y)) * old
    if l<max(x,y):
        summa = l * c1 + new * (p - l)
    if l>=p:
        summa = max(x, y) * c1 + (p - max(x, y)) * old + (l - p) * snos
if (old <= new + snos) and (c1 > old):
    if l<p:
        summa = l * old + (p - l) * new
    if l>=p:
        summa = p * old + (l - p) * snos
if (old > new + snos) and (c1<= new + snos):
    if (l >= max(x,y)) and (l<p):
        summa = max(x, y) * c1 + (l - max(x, y)) * (new + snos) + (p - l) * new
    if l<max(x,y):
        summa = l * c1 + (p - l) * new
    if l>p:
        summa = max(x, y) * c1 + (p - max(x, y)) * (new + snos) + (l - p) * snos
if (old > new + snos) and (c1 > new + snos):
    if l<p:
        summa = l * snos + p * new
    if l>p:
        summa = p * (new + snos) + (l - p) * snos
print(summa)




паук и муха
a,b,c = [int(i) for i in input().split(" ")]
Sx, Sy, Sz = [int(i) for i in input().split(" ")]
Fx, Fy, Fz = [int(i) for i in input().split(" ")]

def Vector(a, b):
    vector = []
    for i in range(0, 3):
        vector.append(b[i]-a[i])
    return vector

def Vector_length(vector):
    length = 0
    for i in vector:
        length += i**2
    return length**(1/2)
if (Fx == 0):
    if (Sx == 0):
        interval = Vector_length(Vector([Fx, Fy, Fz], [Sx, Sy, Sz]))
    if Sz == c:
        interval = Vector_length(Vector([Fy, Fz, 0], [Sy, c + Sx, 0]))
    if Sz == 0:
        interval = Vector_length(Vector([Fy, Fz, 0], [Sy, -Sx, 0]))
    if Sy == 0:
        interval = Vector_length(Vector([-Fy, Fz, 0], [Sx, Sz, 0]))
    if Sy == b:
        interval = Vector_length(Vector([Fy, Fz, 0], [b + Sx, Sz, 0]))
    if Sx == a:
        interval = min(Vector_length(Vector([-Fy, Fz, 0], [a + Sx, Sz, 0])),
                       Vector_length(Vector([Fy, Fz, 0], [Sy, c - Sz + c + a, 0])),
                       Vector_length(Vector([Fy, Fz, 0], [Sy, -(a + Sz), 0])),
                       Vector_length(Vector([Fy, Fz, 0], [b + a + b - Sy, Sz, 0])))
if Fy == 0:
    if (Sy == 0):
        interval = Vector_length(Vector([Fx, Fy, Fz], [Sx, Sy, Sz]))
    if (Sx == 0):
        interval = Vector_length(Vector([Fx, Fz, 0], [-Sy, Sz, 0]))
    if (Sz == 0):
        interval = Vector_length(Vector([Fx, Fz, 0], [Sx, -Sy, 0]))
    if (Sz == c):
        interval = Vector_length(Vector([Fx, Fz, 0], [Sx, c + Sy, 0]))
    if (Sx == a):
        interval = Vector_length(Vector([Fx, Fz, 0], [a + Sy, Sz, 0]))
    if Sy == b:
        interval = min(Vector_length(Vector([Fx, Fz, 0], [Sx, c + b + c - Sz, 0])),
                       Vector_length(Vector([Fx, Fz, 0], [a + b + a - Sx, Sz, 0])),
                       Vector_length(Vector([Fx, Fz, 0], [-(b + Sx), Sz, 0])),
                       Vector_length(Vector([Fx, Fz, 0], [Sx, -(b + Sz), 0])))
if Fz == 0:
    if (Sz == 0):
        interval = Vector_length(Vector([Fx, Fy, Fz], [Sx, Sy, Sz]))
    if (Sx == 0):
        interval = Vector_length(Vector([Fy, -Fx, 0], [Sy, Sz, 0]))
    if (Sy == 0):
        interval = Vector_length(Vector([Fx, -Fy, 0], [Sx, Sz, 0]))
    if (Sx == a):
        interval = Vector_length(Vector([Fy, Fx, 0], [Sy, a + Sz, 0]))
    if (Sy == b):
        interval = Vector_length(Vector([Fx, Fy, 0], [Sx, b + Sz, 0]))
    if Sz == c:
        interval = min(Vector_length(Vector([Fx, -Fy, 0], [Sx, c + Sy, 0])),
                       Vector_length(Vector([Fy, -Fx, 0], [Sy, c + Sx, 0])),
                       Vector_length(Vector([Fx, Fy, 0], [Sx, b + c + b - Sy, 0])),
                       Vector_length(Vector([Fy, Fx, 0], [Sy, a + c + a - Sx, 0])))
if Fz == c:
    if (Sz == c):
        interval = Vector_length(Vector([Fx, Fy, Fz], [Sx, Sy, Sz]))
    if (Sx == 0):
        interval = Vector_length(Vector([Fy, c + Fx, 0], [Sy, Sz, 0]))
    if (Sy == 0):
        interval = Vector_length(Vector([Fx, c + Fy, 0], [Sx, Sz, 0]))
    if (Sy == b):
        interval = Vector_length(Vector([Fx, c + Fy, 0], [Sx, c + b + c - Sz, 0]))
    if (Sx == a):
        interval = Vector_length(Vector([Fy, c + Fx, 0], [Sy, c + a + c - Sz, 0]))
    if (Sz == 0):
        interval = min(Vector_length(Vector([Fy, c + Fx, 0], [Sy, -Sx, 0])),
                       Vector_length(Vector([Fx, c + Fy, 0], [Sx, -Sy, 0])),
                       Vector_length(Vector([Fy, c + Fx, 0], [Sy, c + a + c + a - Sx, 0])),
                       Vector_length(Vector([Fx, c + Fy, 0], [Sx, c + b + c + b - Sy, 0])))
if Fy == b:
    if (Sy == b):
        interval = Vector_length(Vector([Fx, Fy, Fz], [Sx, Sy, Sz]))
    if (Sx == 0):
        interval = Vector_length(Vector([b + Fx, Fz, 0], [Sy, Sz, 0]))
    if (Sz == 0):
        interval = Vector_length(Vector([b + Fx, Fz, 0], [Sy, -Sx, 0]))
    if (Sz == c):
        interval = Vector_length(Vector([b + Fx, Fz, 0], [Sy, c + Sx, 0]))
    if (Sx == a):
        interval = Vector_length(Vector([b + Fx, Fz, 0], [b + a + b - Sy, Sz, 0]))
    if (Sy == 0):
        interval = min(Vector_length(Vector([Fx, c + b + c - Fz, 0], [Sx, Sz, 0])),
                       Vector_length(Vector([a + b + a - Fx, Fz, 0], [Sx, Sz, 0])),
                       Vector_length(Vector([Fx, -(b + Fz), 0], [Sx, Sz, 0])),
                       Vector_length(Vector([-(b + Fx), Fz, 0], [Sx, Sz, 0])))
if Fx == a:
    if (Sx == a):
        interval = Vector_length(Vector([Fx, Fy, Fz], [Sx, Sy, Sz]))
    if (Sy == 0):
        interval = Vector_length(Vector([a + Fy, Fz, 0], [Sx, Sz, 0]))
        print(round(interval, 3))
        exit()
    if (Sz == 0):
        interval = Vector_length(Vector([Fy, a + Fz, 0], [Sy, Sx, 0]))
    if (Sz == c):
        interval = Vector_length(Vector([Fy, c + a + c - Fz, 0], [Sy, c + Sx, 0]))
    if (Sy == b):
        interval = Vector_length(Vector([b + a + b - Fy, Fz, 0], [b + Sx, Sz, 0]))
    if (Sx == 0):
        interval = min(Vector_length(Vector([Fy, c + a + c - Fz, 0], [Sy, Sz, 0])),
                       Vector_length(Vector([a + Fy, Fz, 0], [-Sy, Sz, 0])),
                       Vector_length(Vector([Fy, -(a + Fz), 0], [Sy, Sz, 0])),
                       Vector_length(Vector([b + a + b - Fy, Fz, 0], [Sy, Sz, 0])))
print(round(interval, 3))


######################################################################################
крестьянин и черт
n= int(input())
c = 0
for i in range(1, 100):
    z=2**i
    c =c+int((n/ (z - 1)))
print(c)


разведка:
n=int(input())
for i in range (n,0,-1):
	if 2**i<=n:
		m=2**i+((2**(i+1))-2**i)//2
		if n<=m:
				f=n-2**i
				break
		else:
				f=2**(i+1)-n
				break
print(f)


*************************

with open("input6.txt", "r") as file:
    N = int(file.readline())
    companies = []
    stoim=2147483647
    for i in range(N):
        lst = []
        line = file.readline().split()
        xi1, yi1, zi1, xi2, yi2, zi2 = map(int, line[:6])
        ci1, ci2 = map(float, line[6:])
        companies.append((xi1, yi1, zi1, xi2, yi2, zi2, ci1, ci2))
        v1 = (xi1 * yi1 * zi1) / 1000
        s1 = 2 * xi1 * yi1 + 2 * yi1 * zi1 + 2 * zi1 * xi1
        v2 = (xi2 * yi2 * zi2) / 1000
        s2 = 2 * xi2 * yi2 + 2 * yi2 * zi2 + 2 * zi2 * xi2
        y=(ci1*s2-s1*ci2)/(v1*s2-s1*v2)
        mol=round(y,2)
        if mol<stoim:
            stoim=mol
            nom=i+1
            lst.append(nom)
        elif mol==stoim:
            stoim = mol
            nom = i + 1
            nom=min(lst)
print("Номер фирмы, у которой стоимость собственно молока минимальна= ", nom)
print("Стоимость в рублях= ", stoim)
